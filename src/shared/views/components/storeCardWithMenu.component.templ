package views

import (
    "fmt"
    "strconv"

    "github.com/IqbalLx/food-order/src/shared/entities"
	"github.com/IqbalLx/food-order/src/shared/utils"
)

script updateQuantityWithNoDisplay(menuID string, step int, isIncreasing bool) {
    const inputElem = document.getElementById(`quantity-input-${menuID}`);

    const quantity = parseInt(inputElem.value);
    const newQuantity = isIncreasing ? quantity + step : Math.max(0, quantity - step);

    inputElem.value = newQuantity.toString();
}

templ SmallMenuCard(menu entities.StoreMenuWithQuantity) {
    <sl-card class="flex-none list ltr card-image bg-base-100 shadow-sm w-60 h-20 overflow-hidden">
            <img
                slot="image"
                src={ menu.Image }
                alt={ menu.Name }

                class="aspect-square object-cover h-20 flex-none"
            />

            <div class="w-full h-full flex flex-col justify-evenly mx-2 py-1">
                <div class="flex flex-row justify-between items-start">
                        <strong 
                            if (menu.PricePromo != 0) {
                                class="text-xs text-wrap w-2/3"
                            } else {
                                class="text-xs text-wrap"
                            }
                        >{ menu.Name }</strong>

                        if (menu.PricePromo != 0) {
                            <sl-badge variant="danger" class="w-1/3" pill>
                                <small>
                                    Promo
                                </small>
                            </sl-badge>
                        }
                </div>

                <div class="flex flex-row justify-between items-end w-full">
                    if (menu.PricePromo != 0) {
                        <div class="flex flex-row w-full gap-2">
                            <p class="text-xs">{ utils.FormatPrice(menu.PricePromo) }</p>
                            <s class="text-xs text-slate-300">{ utils.FormatPrice(menu.Price) }</s>
                        </div>
                    } else {
                        <p class="text-xs">{ utils.FormatPrice(menu.Price) }</p>
                    }

                    <div>
                        <form id={ "form-input-" + menu.ID } style="display: none;">
                            <input 
                                id={ "quantity-input-" + menu.ID }  
                                name="quantity" value={ strconv.Itoa(menu.Quantity) }
                            ></input>
                            <input
                            name="menu_id" value={ menu.ID } 
                            ></input>
                        </form>

                        <sl-button 
                                variant="default" 
                                size="small" 
                                circle

                                onclick={ updateQuantityWithNoDisplay(menu.ID, 1, true) }
                                hx-put="/carts"
                                hx-trigger="click delay:300ms"
                                hx-include={ "#form-input-" + menu.ID }
                                hx-swap="none"
                                hx-indicator=".htmx-indicator"
                            > 
                                <sl-icon name="plus-lg" label="Tambah ke Keranjang" class="text-sm"></sl-icon>
                        </sl-button>
                    </div>
                </div>
            </div>
        </sl-card>
}

templ StoreCardWithMenu(store entities.StoreWithMatchingMenu, query string, size int, isNextPageAvailable bool, nextPage int, lastInList bool) {
    <div>
        <a href={ templ.URL(fmt.Sprintf("/stores/%s?query=%s", store.Slug, utils.EncodeQuerystring(query))) } class="w-full" hx-boost="true" hx-push-url="true">
        <sl-card 
                class="ltr list card-image bg-base-100 shadow-sm w-full px-2"
                if (lastInList && isNextPageAvailable) {
                    hx-trigger="intersect once"
                    hx-get={ fmt.Sprintf("/stores/search?query=%s&size=%d&page=%d", query, size, nextPage) }
                    hx-target="#store-with-menu-last-card"
                    hx-swap="outerHTML"
                    hx-indicator=".htmx-indicator"
                }
                >
                <img
                    slot="image"
                    src={ store.Image }
                    alt="Store Image"
                    class="aspect-square object-cover w-32 flex-none"
                />

                <div class="w-full h-32 flex-initial mx-2">
                    <div class="h-full flex flex-col justify-evenly">
                        <div class="mb-1">
                            <div class="flex flex-row justify-between items-center w-full">
                                <strong class="text-sm">{ store.Name }</strong>
                                
                                if store.Rating != 0 {
                                    <div class="flex flex-row items-center">
                                        <sl-icon name="star-fill" style="color: var(--sl-color-amber-500);" class="text-xs"></sl-icon>
                                        <p class="text-xs">{ strconv.FormatFloat(float64(store.Rating) / 10, 'f', 1, 32) } </p>
                                    </div>
                                }
                            </div>

                            <p class="text-xs">
                                { store.ShortDesc }
                            </p>
                        </div>

                        <div class="flex flex-row flex-wrap gap-1">
                            for _, category := range store.Categories {
                                <sl-tag size="small" pill>
                                    <small>{ category }</small>
                                </sl-tag>
                            }
                        </div>

                        <strong class="text-xs text-amber-500">
                                Ketemu { strconv.Itoa(store.MatchingMenuCount) } menu!
                        </strong>
                    </div>
                </div>
            </sl-card> 
        </a>

        <div class="flex flex-row gap-4 overflow-x-scroll no-scrollbar max-w-screen">
            for i, menu := range store.Menus {
                <div 
                    if (i == 0) {
                        class="ml-2"
                    } else if (i == len(store.Menus) - 1 && len(store.Menus) == store.MatchingMenuCount) {
                        class="mr-2"
                    }
                >
                    @SmallMenuCard(menu)
                </div>
            }

            if (len(store.Menus) < store.MatchingMenuCount) {
                <a href={ templ.URL(fmt.Sprintf("/stores/%s?query=%s", store.Slug, utils.EncodeQuerystring(query))) } class="w-full" hx-boost="true" hx-push-url="true">
                    <div class="flex flex-col w-20 h-20 mr-2 gap-y-1 justify-center">
                        <div class="w-full flex-none">
                            <sl-button 
                                    variant="default" 
                                    size="small" 
                                    circle

                                    class="flex flex-row justify-center"
                                > 
                                    <sl-icon name="arrow-right" label="Lihat semua" class="text-sm"></sl-icon>
                            </sl-button>
                        </div>

                        <div class="text-xs text-prose w-full flex-none">
                            <p class="flex flex-row justify-center">
                                Lihat Semua
                            </p>
                        </div>
                    </div>
                </a>
            }
        </div>

        <sl-divider></sl-divider>
    </div>
}

templ StoreCardWithMenuSkeleton() {
    @GenericCardSkeleton("")

    <sl-card class="flex-none list ltr card-image bg-base-100 shadow-sm w-60 h-20 overflow-hidden">
            <div slot="image">
                <sl-skeleton class="w-20 h-20" style="--border-radius: 0;"></sl-skeleton>
            </div>

        <div class="w-full h-full flex flex-col justify-evenly mx-2 py-1">
            <sl-skeleton effect="pulse"></sl-skeleton>
            <sl-skeleton class="w-50%" effect="pulse"></sl-skeleton>
        </div>
    </sl-card>
}

templ StoreCardWithMenuIndicator() {
    <div class="mx-2 htmx-indicator">
        @StoreCardWithMenuSkeleton()
        <sl-divider></sl-divider>
    </div>
}